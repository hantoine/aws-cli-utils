#!/bin/bash
if [ -z "$1" ] ; then
	res=$(aws ec2 describe-instances --output json --query "Reservations[0].Instances[0].{IP:NetworkInterfaces[0].Association.PublicIp,AMI:ImageId}" --filters "Name=instance-state-name,Values=running")
        if [ "$res" = "null" ] ; then
            echo "No running instance found"
            exit 1
        fi
	ip=$(echo $res | jq .IP | sed -e 's/^"//' -e 's/"$//')
	ami=$(echo $res | jq .AMI | sed -e 's/^"//' -e 's/"$//')
else
	ip=$1
	if [ -z "$2" ] ; then
		ami=$(aws ec2 describe-instances --output json --query "Reservations[0].Instances[0].ImageId" \
			--filters Name=ip-address,Values=$ip | sed -e 's/^"//' -e 's/"$//')
	else
		ami=$2
	fi
fi


if [ -z "$AWS_CLI_UTILS_DEFAULT_KEY_NAME" ] ; then
	echo "Which AWS key pair should be used ?"
	read key_name
	echo "The key pair file should be placed in ~/.ssh and named $key_name.pem"
	echo "Set the environment variable AWS_CLI_UTILS_DEFAULT_KEY_NAME to set the key pair to use for next times"
else
	key_name="$AWS_CLI_UTILS_DEFAULT_KEY_NAME"
fi

function get_connection_user() {
	ami=$1
	user=$(cat ~/.aws-cli-utils/ami-users 2> /dev/null | jq -re ".[\"$ami\"] // empty")
	if [ -z "$user" ] ; then
		echo "Unknown connection user for ami: $ami" >&2
		read -p "Enter the connection user: " user >&2
		echo "Adding it to  ~/.aws-cli-utils/ami-users" >&2
		if [ ! -f "~/.aws-cli-utils/ami-users" ] ; then
			mkdir -p ~/.aws-cli-utils
			echo '{}' >> ~/.aws-cli-utils/ami-users
		fi
                tmpfile=$(mktemp)
		jq ". + {\"$ami\": \"$user\"}" ~/.aws-cli-utils/ami-users > $tmpfile && mv $tmpfile ~/.aws-cli-utils/ami-users
	fi
	echo $user
}

if [ ! -z "$AWS_CLI_UTILS_CREATE_SSH_TUNNEL" ] ; then
    tunnel_cmd_part='-L 8889:localhost:8888'
else
    tunnel_cmd_part=''
fi

if [ ! -x "$AWS_CLI_UTILS_ACCEPT_NEW_HOST_KEY" ] ; then
    strick_host_checking_cmd_part='-o StrictHostKeyChecking=accept-new'
else
    strick_host_checking_cmd_part=''
fi

user=$(get_connection_user $ami)
LC_CTYPE=en_US.utf8 ssh -i ~/.ssh/$key_name.pem $user@$ip $strick_host_checking_cmd_part $tunnel_cmd_part
