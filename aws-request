#!/bin/bash
if [ -z $1 ] ; then
	request_id='default'
else
	request_id=$1
fi
splot_fleet_request_config="/etc/aws-cli-utils/$request_id-aws-request.json"
if [ ! -f "$splot_fleet_request_config" ] ; then
	if [ -f "$splot_fleet_request_config.ejs" ] ; then
		if [ -z "$AWS_CLI_UTILS_DEFAULT_KEY_NAME" ] ; then
			echo "Which AWS key pair should be used ?"
			read key_name
			echo "The key pair file should be placed in ~/.ssh and named $key_name.pem"
			echo "Set the environment variable AWS_CLI_UTILS_DEFAULT_KEY_NAME to set the key pair to use for next times"
		else
			key_name="$AWS_CLI_UTILS_DEFAULT_KEY_NAME"
		fi
		mkdir -p /tmp/aws-cli-utils
		cat $splot_fleet_request_config.ejs | sed "s/<%= KEY_NAME %>/$key_name/g" > /tmp/aws-cli-utils/$request_id-aws-request.json
		splot_fleet_request_config="/tmp/aws-cli-utils/$request_id-aws-request.json"
	else
		echo "No config for $request_id"
		exit 1
	fi
fi
command="aws ec2 request-spot-fleet --spot-fleet-request-config file://$splot_fleet_request_config --query \"SpotFleetRequestId\""
fleet_request_id=$($command | sed -e 's/^"//' -e 's/"$//')
if [ "$?" -ne "0" ] ; then
 	exit
fi

# Not using aws ec2 wait spot-instance-request-fulfilled because:
#  1) It does not work with fleet request (it's impossible to get instance-request from fleet-request)
#  2) It polls only every 15 seconds
echo "Waiting for Spot request to be accepted..."
sleep 10 # No point checking too early, it takes at least 10 seconds
check_instance="aws ec2 describe-spot-fleet-instances --spot-fleet-request-id $fleet_request_id"
n_instance_ready=$($check_instance | jq '.ActiveInstances | length')
while [ "$n_instance_ready" -eq "0" ] ; do
	sleep 3
	n_instance_ready=$($check_instance | jq '.ActiveInstances | length')
done

get_instance_id="aws ec2 describe-spot-fleet-instances --spot-fleet-request-id $fleet_request_id --query ActiveInstances[0].InstanceId"
instance_id=$($get_instance_id | sed -e 's/^"//' -e 's/"$//')
echo "Instance ID: $instance_id"

get_ip_address="aws ec2 describe-instances --instance-ids $instance_id --query Reservations[0].Instances[0].PublicIpAddress"
ip_address=$($get_ip_address | sed -e 's/^"//' -e 's/"$//')
echo "IP Address: $ip_address"

echo "Waiting for instance to start..."
check_instance_running="aws ec2 describe-instances --instance-ids $instance_id --query Reservations[0].Instances[0].State.Name"
instance_state=$($check_instance_running | sed -e 's/^"//' -e 's/"$//')
while [ "$instance_state" != "running" ] ; do
	sleep 5
	instance_state=$($check_instance_running | sed -e 's/^"//' -e 's/"$//')
done

sleep 10

# Adding SSH host key in SSH known hosts file
echo "Waiting to obtain SSH host key..."
get_ssh_host_key_cmd="ssh-keyscan -t ecdsa -H $ip_address"
while [ -z "$found_host_key" ] ; do
	found_host_key_entry=$($get_ssh_host_key_cmd 2> /dev/null)
	found_host_key=$(echo $found_host_key_entry | cut -d "|" -f 4 | cut -d " " -f 2-)
	sleep 3
done

echo "waiting to check SSH host key..."
check_ssh_host_key_cmd="aws ec2 get-console-output --instance-id $instance_id --output text | grep ecdsa"
while [ -z "$correct_host_key" ] ; do
	correct_host_key=$(sh -c "$check_ssh_host_key_cmd" | head -c -3)
	sleep 3
done
if [ "$correct_host_key" != "$found_host_key" ] ; then
	echo "SSH host key does not match"
	exit
else
	echo $found_host_key_entry >> ~/.ssh/known_hosts
fi
echo "Connecting..."
AWS_CLI_UTILS_DEFAULT_KEY_NAME=$key_name aws-ssh $ip_address
